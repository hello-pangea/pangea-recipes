model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  token String @unique

  expiresAt DateTime @map("expires_at")

  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")

  @@map("sessions")
}

model Account {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  accountId  String @unique @map("account_id")
  providerId String @unique @map("provider_id")

  accessToken  String? @map("access_token")
  refreshToken String? @map("refresh_token")

  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")

  scope String?

  idToken String? @map("id_token")

  password String?

  @@map("accounts")
}

model Verification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  identifier String @unique

  value String

  expiresAt DateTime @map("expires_at")

  @@map("verifications")
}
